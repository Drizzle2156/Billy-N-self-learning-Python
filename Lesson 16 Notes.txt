python3 arcade.py -n "Charly"


python3 rps.py -n "Charly"

python3 guess_number.py -n "Charly"




how to make a program only run as a module in python?

ChatGPT
In Python, you can check whether a script is being run as the main program or if it is being imported as a module. This can be done using the __name__ attribute. When a Python script is run, the __name__ attribute is set to "__main__" for the script being executed.

Here's an example:

python
Copy code
# module_example.py

def some_function():
    print("This is a function in the module.")

# Check if the script is being run as the main program
if __name__ == "__main__":
    print("This script is being run directly.")
    # You can include code that should only run when the script is the main program
    some_function()
else:
    print("This script is being imported as a module.")
    # You can include module-level code here if needed
In this example, if you run module_example.py directly, it will execute the code under the if __name__ == "__main__": block. If you import module_example into another script, it will execute the code under the else block.

This is a common practice in Python scripts to allow reusable modules. It ensures that certain parts of the code are only executed when the script is run directly and not when it's imported as a module.



COPY OF ARCADE WHEN IT WORKED THE FIRST TIME



def Return_arcade(name='Gamer'):
#     print(f"\n{name}, welcome back to the Arcade menu.")
#     GamerChoice = input(
#         f"\nPlease choose a game:\n1 = Rock Paper Scissors\n2 = Guess My Number\n\nOr press 'x' to exit the Arcade\n")
# # the data type of user inputs always returns a string
#     if GamerChoice not in ["1", "2", "x"]:
#         print(f"{name}, please enter 1, 2, or x")
#         return Return_arcade()

#     # Gamer = int(GamerChoice) dont need to convert 1 or 2 into an integer

#     def Return_pick_game():
#         nonlocal GamerChoice

#         if GamerChoice == "1":
#             rps8.rock_paper_scissors()
#         elif GamerChoice == "2":
#             guess_number.second_game()
#         else:
#             sys.exit()





